-- Default values for operands
initOperand :: SymbolType -> Maybe Int -> Codegen Operand
initOperand IntType _ = return zero
initOperand ByteType _ = return $ cons $ C.Int 8 0
initOperand ProcType _ = return zero
initOperand TableIntType  (Just dim) = return $ cons $ C.Array i32 [C.Int 32 0 | _ <- [1..dim]]
initOperand TableByteType (Just dim) = return $ cons $ C.Array i8  [C.Int  8 0 | _ <- [1..dim]]
initOperand DisplayType (Just dim) = return $ cons $ C.Array (ptr i8) [C.Int  32 0 | _ <- [1..dim]]
initOperand _ _ = return zero

addVarOperand :: VarInfo -> Codegen VarInfo
addVarOperand var_info = do
    let tp = var_type var_info
        dim = dimension var_info
        nm = var_name var_info
    init_val <- initOperand tp dim
    var <- allocavar (symb_to_astp (V var_info)) nm
    store var init_val
    case tp of
        TableIntType  -> do
            pointer_int <-  bitcast var (ptr i32)
            return $ var_info { var_operand = Just pointer_int }
        TableByteType -> do
            pointer_byte <- bitcast var (ptr i8)
            return $ var_info { var_operand = Just pointer_byte }
        DisplayType -> do
            pointer <- bitcast var (ptr (ptr i8))
            return $ var_info { var_operand = Just pointer }
        _             -> return $ var_info { var_operand = Just var }
        

create_ptr :: Operand -> [Operand] -> String -> Codegen Operand -- used for table indexing
create_ptr table indexes nm = instr_named (GetElementPtr False table indexes []) (nm++".elem")

bitcast :: Operand -> Type -> Codegen Operand
bitcast op tp = instr $ BitCast op tp []

cgen_lval (S.LV_Tbl tbl_var offset_expr) = do
    offset <- cgen_expr offset_expr   --generate the expression for the offset
    tbl_operand <- getvar tbl_var     -- get the table operand
    create_ptr tbl_operand [offset] tbl_var

cgen_lval (S.LV_Lit str) = do
    globStrName <- freshStr
    define $ globalStr globStrName str
    let op = externstr (Name $ toShort globStrName) (str_type str)
    bitcast op (ptr i8)
